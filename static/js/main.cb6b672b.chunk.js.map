{"version":3,"sources":["hooks/colorGenerator.js","config.js","components/ColorCanvas.js","App.js","index.js"],"names":["usetColorGenerator","color_start","color_end","color_step","i","j","k","red","green","blue","ColorCanvas","props","canvasRef","useRef","colors","useColorGenerator","React","useState","isLoaded","setIsLoaded","loader","useEffect","context","current","getContext","config","next","value","fillStyle","fillRect","ref","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0OAUUA,GAAV,SAAUA,EAAV,oFAA+BC,EAA/B,EAA+BA,YAAaC,EAA5C,EAA4CA,UAAWC,EAAvD,EAAuDA,WAC5CC,EAAIF,EADf,YAC0BE,GAAKH,GAD/B,iBAEaI,EAAIH,EAFjB,YAE4BG,GAAKJ,GAFjC,iBAGeK,EAAIJ,EAHnB,YAG8BI,GAAKL,GAHnC,iBAIQ,OAJR,SAIc,CACJM,IAAKD,EACLE,MAAOH,EACPI,KAAML,GAPhB,OAGgDE,GAAQH,EAHxD,uBAE8CE,GAAQF,EAFtD,uBAC4CC,GAAQD,EADpD,uDAceH,QCxBA,EA0BA,EA1BA,EA2BF,IA3BE,EA4BN,EA5BM,EAgCG,IAhCH,EAiCE,I,OCWFU,MA9Bf,SAAqBC,GACnB,IAAMC,EAAYC,iBAAO,MACnBC,EAASC,EAAkB,eAAKJ,IAFZ,EAGMK,IAAMC,UAAS,GAHrB,mBAGnBC,EAHmB,KAGTC,EAHS,KAItBC,EAAS,KAmBb,OAjBAC,qBAAU,WAGR,IAFA,IACMC,EADSV,EAAUW,QACFC,WAAW,MACzBpB,EAAI,EAAGA,EAAIqB,EAAsBrB,IACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIoB,EAAuBpB,IAAK,CAAC,IAAD,EACnBS,EAAOY,OAAOC,MAAnCpB,EADwC,EACxCA,IAAKC,EADmC,EACnCA,MAAOC,EAD4B,EAC5BA,KAClBa,EAAQM,UAAY,OAASrB,EAAM,IAAMC,EAAQ,IAAMC,EAAO,IAC9Da,EAAQO,SAASzB,EAAGC,EAAG,EAAG,GAG9Bc,GAAY,KACX,CAACL,IAECI,IACHE,EAAS,kDAIT,gCACGA,EACD,wBAAQU,IAAKlB,Q,MCtBJmB,MAbf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,qDACA,cAAC,EAAD,CACE/B,YAAawB,EACbvB,UAAWuB,EACXtB,WAAYsB,QCPdQ,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.cb6b672b.chunk.js","sourcesContent":["/**\r\n * @author Ketan Bhalerao\r\n * @description This component generates array of ColoredPixel Components\r\n * based on props passed, list of props it accepts are given below\r\n * e.g if start - 8, end - 256, step - 8,\r\n * it will generate 32768 components with those many distinct r,g,b values\r\n *\r\n * @param {color_start, color_end, color_step}\r\n */\r\n\r\nfunction* usetColorGenerator({ color_start, color_end, color_step }) {\r\n  for (let i = color_end; i >= color_start; i = i - color_step) {\r\n    for (let j = color_end; j >= color_start; j = j - color_step) {\r\n      for (let k = color_end; k >= color_start; k = k - color_step) {\r\n        yield {\r\n          red: k,\r\n          green: j,\r\n          blue: i\r\n        };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default usetColorGenerator;\r\n","export default {\r\n  /*\r\n  RGB - Red, Green, Blue Color Model \r\n  follows 2 Digit HEX Number format\r\n  which in decimal representation \r\n  ranges from 0 to 256\r\n  \r\n  Color Start & End is any number between above range\r\n\r\n  It along with Steps is used to generate range of colors \r\n  e.g if start - 8, end 256, step - 8, below sequence/array will be generated \r\n  & will be plottd in \r\n  DIV/Region of dimension 128 x 256\r\n\r\n  8 8 8\r\n  8 8 16\r\n  ...\r\n  8 8 256\r\n\r\n  8 16 8\r\n  8 16 16\r\n  ...\r\n  8 16 256\r\n  ...\r\n  256 256 256\r\n  */\r\n  COLOR_START: 8,\r\n  COLOR_END: 256,\r\n  STEPS: 8,\r\n  /*\r\n  PLOTTER HEIGHT, WIDTH in pixels\r\n   */\r\n  PLOTTER_HEIGHT: 128,\r\n  PLOTTER_WIDTH: 256\r\n};\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport useColorGenerator from \"../hooks/colorGenerator\";\r\nimport config from \"../config\";\r\n\r\n/**\r\n * @author Ketan Bhalerao\r\n * @description This component Plot list of colors on Canvas\r\n * based on props passed, list of props it accepts are given below\r\n * e.g if start - 8, end - 256, step - 8,\r\n * it will plot 32768 distinct color with those many distinct r,g,b values\r\n *\r\n * @param {color_start, color_end, color_step} props\r\n */\r\n\r\nfunction ColorCanvas(props) {\r\n  const canvasRef = useRef(null);\r\n  const colors = useColorGenerator({ ...props });\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n  let loader = null;\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    for (let i = 1; i < config.PLOTTER_WIDTH; i++) {\r\n      for (let j = 1; j < config.PLOTTER_HEIGHT; j++) {\r\n        let { red, green, blue } = colors.next().value;\r\n        context.fillStyle = \"rgb(\" + red + \",\" + green + \",\" + blue + \")\";\r\n        context.fillRect(i, j, 1, 1);\r\n      }\r\n    }\r\n    setIsLoaded(true);\r\n  }, [colors]);\r\n\r\n  if (!isLoaded) {\r\n    loader = <div>LOADING.......</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loader}\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n}\r\nexport default ColorCanvas;\r\n","import React from \"react\";\nimport ColorCanvas from \"./components/ColorCanvas\";\nimport \"./App.css\";\nimport config from \"./config\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Color Plotted Image</h1>\n      <ColorCanvas\n        color_start={config.COLOR_START}\n        color_end={config.COLOR_END}\n        color_step={config.STEPS}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}